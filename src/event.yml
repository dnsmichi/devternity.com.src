---
product: DT_RIX_23
year: 2023
date: "2023-12-07"
prices:
  EUR: 399
  GBP: 360
  USD: 435
registration_opens: "2023-02-28"
status: on_sale # on_sale or empty
masterclasses:
  date: "2023-12-08"
  items:
    - instructor:
        name: Adam Tornhill
        img: Tornhill.jpg
      title: Prioritizing Technical Debt in Large-Scale Systems
      from: "09:00"
      to: "17:00"
      brief_description: |
        # Prioritizing Technical Debt in Large-Scale Systems

        Prioritizing technical debt is a hard problem as modern systems might have millions of lines of code and multiple development teams — no one has a holistic overview. Fortunately, a new set of techniques known as behavioral code analysis are here to help. These combine quality metrics with data on how the engineering organization works with the code. You can then prioritize improvements and risks so that you can balance short- and long-term goals guided by objective data. This new perspective on software development will change how you view code.

        Together we will:
        * Learn the principles of prioritizing technical debt
        * Prioritize technical debt in large-scale systems
        * Balance the trade-off between improving existing code versus adding new features
        * Put quantitative numbers on the costs so that you can make the business case for larger improvements to non-technical stakeholders
          
        Go through real-world case studies from both Microservices and Monoliths.
        
        And much more!


    - instructor:
        name: David Neal
        img: David Neal.jpg
      title: Practical Leadership for Developers
      from: "13:00"
      to: "21:00"
      brief_description: |
        # Practical Leadership for Developers

        We all have an opportunity every day to make a postive impact on folks around us. These are often called "soft skills," but they can be some of the hardest to learn! We could call them "people skills," "essential skills," or "core skills." But, how about "**SKILLS OF AWESOMENESS?**" Yes, what we all need is more ways we can be awesome to each other, and awesome together. 
        
        You'll learn: 
        * Why leadership and awesomeness skills matter to everyone
        * How to become a better leader
        * How to run effective meetings
        * How to deal with conflict and find consensus
        * How to get better at listening and communication
        * How to encourage and motivate others
        
        And much more!

        Through a series of practical exercises, we will discover and discuss the most important and relevant topics you want to cover, so that you can get the most value out of this masterclass! 
        
        The masterclass is led by David Neal – #1 speaker of 2021.

    - instructor:
        name: Scott Wlaschin
        img: Scott Wlaschin.jpg
      title: Domain Modeling Made Functional
      from: '09:00'
      to: '17:00'
      brief_description: |
        # Domain Modeling Made Functional

        Functional programming can be an excellent approach to designing
        decoupled, reusable systems with a rich domain model. This masterclass will
        show you why and how. 

        You''ll learn the core concepts of FP, and how to
        apply them to crafting domain logic, capturing business rules, designing business
        workflows, error handling, and much more, including: 
        * Introduction to functional programming
        * Functions and types
        * Composition as the fundamental principle
        * Overview of DDD principles
        * The importance of bounded contexts
        * Onion/Hexagonal architecture and how this works with functional programming
        * Modeling requirements with algebraic types
        * Modeling constraints, states, and workflows
        * Keeping IO at the edges
        * Handling domain errors
        * Composing complex functions
        * Evolving the domain
        * Dealing with changes in requirements

        We will be using F# as our development language. The principles will be applicable
        to other languages. No experience with F# needed.
      almost_sold_out: true


    - instructor:
        name: Ian Cooper
        img: Ian Cooper.png
      title: Practical Messaging
      from: '09:00'
      to: '17:00'
      almost_sold_out: true    
      brief_description: |
        # Practical Messaging

        Increasingly developers are relying on distributed architectures to solve the problems of scaling their applications and their development teams. But that means they now have to consider the problem of getting the parts of their systems to talk to each other.

        In this masterclass, we will look at distributed systems, such as microservices, and how we integrate them. We will understand why we would prefer messaging, the fundamentals and key concepts of messaging, and how to build an event-driven architecture. 

        Topics covered include:
        * Why and when distribute?
        * How messaging, distributed, and event-driven architectures work?
        * Different integration styles
        * Basic Messaging Patterns (work queues, publish-subscribe, dead letter channel...)
        * Advanced Messaging Patterns (streams, ordering, guaranteed delivery...)
        * Orchestration vs. Choreography
        * CAP Theorem
        * and much more!

        We will use Rabbit MQ message broker. Hands-on exercises are offered in C#, JavaScript, Python and Go. 


    - instructor:
        name: Allen Holub
        img: Allen Holub.png
      title: Incremental Architecture
      from: '14:00'
      to: '23:00'
      brief_description: |
        # Incremental Architecture

        You can’t simultaneously fight your code and be Agile—it slows you down too much. Your code’s design must evolve incrementally along with your understanding of the product. In this masterclass, you’ll learn **everything you need to create highly adaptable designs**. Along the way, you’ll also experience Event Storming and other Domain-Driven Design techniques.
        
        You’ll learn:
        * How to design a system that can evolve incrementally
        * SOLDIER principles (Simple, Obvious, Lightweight, Domain focused, Independent, Essential, Refactorable)
        * Architectural patterns appropriate for incremental development
        * How to create strictly-isolated highly decoupled subsystems
        * Domain-focused architectures (including DDD)
        * How to use the domain to maintain system coherence as the architecture grows
        * How to identify key abstractions, bounded contexts, entities, aggregates.
        
        In all, you’ll learn how to build a coherent and highly maintainable system and architecture that can easily accommodate changing requirements and grow incrementally as the system evolves

    - instructor:
        name: Jakub Pilimon
        img: Jakub Pilimon.jpg
      title: Pragmatic Refactoring Towards Better Architecture
      from: '09:00'
      to: '17:00'
      brief_description: |
        # Pragmatic Refactoring Towards Better Architecture

        Are you struggling with your codebase which causes problems
        like poor maintenance, unreadability, performance, and poor testability? After this masterclass, you will be ready to identify and repair architectural
        and code root causes of those issues using proven patterns and techniques from Domain-Driven Design, Test-Driven Development, Object-Oriented Programming, and modularization. 

        During code exercises, we will walk through solutions
        to issues like: 
        * What to do with a “God Classes”?
        * Modules/classes with huge coupling and with overload of business logic 
        * Mismatch between the code model and the business model of the reality
        * How to repair data inconsistency?
        * Inefficient reads from my database?
        * No clear boundaries in my codebase, how to introduce some?
        * and much more!

        The masterclass will start with code that represents a huge legacy system that some of us have to work with on a daily basis. We will gradually refactor it and not only introduce patterns like CQRS, aggregates,
        policies, and parallel change, but also walk through how to talk about refactoring, technical debt, and how to sell our ideas to management.

        The course is for developers able to code and complete exercises in Java, C#, or PHP.
    - instructor:
        name: Venkat Subramaniam
        img: Venkat Subramaniam.png
      from: "09:00"
      to: "17:00"
      title: "Programming in Kotlin: The Essential Parts"
      brief_description: |
        # Programming in Kotlin: The Essential Parts

        Kotlin is an elegant, powerful, and overall a pleasant language to work with. In this masterclass learn the essential parts of Kotlin. We'll focus on fundamental parts of Kotlin, it's imperative and functional programming capabilities, how Kotlin provides elegance without compromising performance by tactfully channeling the JDK. We will also dive into how to interact between Kotlin and Java code.

        Topics Covered:
        * Running Kotlin Programs and Scripts on the JVM
        * Creating functions and Functional Style code
        * Powerful features of Kotlin, including extension functions and nullable types
        * Kotlin's Performance related features
        * Kotlin Java Interop
        
        What will you learn?
        * How to program with Kotlin
        * Create type safe, maintainable code
        * Leverage both imperative and functional style as appropriate
        * Work with ease to exploit the power of the language
        * Intermix Kotlin with Java code
        
        The course is for Java programmers, team leaders, and architects.
    - instructor:
        name: David Farley
        img: Dave Farley.jpg
      from: "09:00"
      to: "17:00"
      title: Modern Software Engineering
      brief_description: |
        # Modern Software Engineering

        In this masterclass, guided by continuous delivery expert David Farley, we'll learn durable principles at the heart of effective, modern software development. 

        Farley's techniques cohere into a unified, scientific, and foundational approach to solving practical software development problems within realistic economic constraints. 

        The topics include:
        * Doing what works to build better software faster
        * Distinguishing good software development ideas from bad ones
        * Building a culture of experimentation and empiricism
        * Staying in control as systems grow more complex
        * Choosing your tools based on sensible criteria
        * Organizing work and systems to facilitate continuing incremental progress
        * Evaluating your progress toward thriving systems, not just more "legacy code"

        And much more!
    - instructor:
        name: Victor Rentea
        img: Victor Rentea.jpg
      title: Clean and Pragmatic Architecture
      from: "08:00"
      to: "16:00"
      brief_description: |
        # Clean and Pragmatic Architecture

        In this masterclass, through code examples, hands-on exercises,
        and discussions you''ll learn how to design a clean and pragmatic architecture.

        The topics include: 
        * Layered Architecture: strict and relaxed variants
        * Onion Architecture (aka Clean, Hexagonal, Ports-and-Adapters, Universal)
        * Controllers: typical design options with tradeoffs
        * Entities: techniques and best practices for modeling expressive entities
        * Domain Services: how to keep them small, what is the domain logic?
        * Facade vs. Application Service (DDD): a pragmatic evolutionary design strategy
        * DTOs: enemy structures and when to keep them out of our domain
        * Entity/DTO mapping: Best practices, pitfalls of automatic mappers
        * Dependency Inversion Principle: stopping external APIs from polluting our domain
        * Repositories: designing a domain-friendly search DSL
        * Domain Events: mainstream best practices
        * CQRS: separating read/write models
        * and much more!

        This masterclass uses Java as a reference language.
    - instructor:
        name: Kevlin Henney
        img: Kevlin Henney.png
      title: Agile Architecture
      from: "09:00"
      to: "17:00"
      brief_description: |
        # Agile Architecture

        Every system has an architecture, whether accidental or
        intentional, and regardless of whether it was put in place by a nominated
        architect or whether it emerged from the decisions and discussions of a team.
        
        All too often the focus of what is often described as architecture is centred
        around a specific set of platform technologies, which forms only one part
        of the set of concerns an architecture should. And all too often architecture
        is seen as a separate concern from development process, whereas the two are
        intertwined — **what you build is influenced by how you build it, and vice versa.**

        The course covers a wide range of topics through a number of practical exercises,
        with plenty of time dedicated to group discussion:
        * The relationship between development process and architecture
        * The roles and failure modes of testing, modelling and technology platforms
        * Different architectural styles and design patterns
        * How to transform product vision into architecture
        * Future-proofing your architecture, and accounting for uncertainty
        * How to ground your architecture and avoid overdesign
        
        And much more!
schedule:
  - from: "09:00"
    to: "09:50"
    talks:
      - Dave Farley
      - Kevlin Henney
      - Sandi Metz
  - from: "10:10"
    to: "11:00"      
    talks:
      - Adam Tornhill
      - Venkat Subramaniam
      - Scott Hanselman
  - from: "11:20"
    to: "12:10"
    talks:
      - Eduards Sizovs
      - Ian Cooper
      - J.B. Rainsberger
  - from: "13:10"
    to: "14:00"  
    talks:
      - Robert Martin
      - Sam Newman
      - Josh Long
  - from: "14:20"
    to: "15:10"  
    talks:
      - Thiago Ghisi
      - Daniel Terhorst-North
      - John Romero
  - from: "15:30"
    to: "16:20"  
    talks:
      - Allen Holub
      - Gregor Hohpe
      - ''
  - from: "16:40"
    to: "17:30"  
    talks:
      - ''
      - ''
      - ''
keynotes:
  - name: Dave Farley
    twitter: davefarley77
    bio: Author of Modern Software Engineering and Continuous Delivery
    title: Modern Software Engineering
    description: |
      # Modern Software Engineering

      In this session, continuous delivery pioneer David Farley illuminates durable principles at the heart of effective, modern software development. 

      He distills the discipline into two core exercises: learning and exploration and managing complexity. 

      For each, he defines principles that can help you improve everything from your mindset to the quality of your code and describes approaches proven to promote success.
    img: Dave Farley.jpg


  - name: Kevlin Henney
    twitter: kevlinhenney
    bio: Author of Architecture and Programming Books, Consultant, Trainer
    title: Lean Code
    description: |
      # Lean Code

      Lean has been applied as a toolkit to fine-tune development processes and organisational workflow, but what does it mean when we apply the practices to the detail of the code, the practices used to develop it and the people who develop it? What does Lean Code and its creation look like? There is a need to move beyond often separated worlds of software craft and agile development, to properly embrace code in its detail, but to also connect it more completely to the flow of business and the intelligence of people around it. To move beyond simple exhortations of clean code to something more human. This talk offers a fresh look at Lean principles and practices from the perspective of the code and the coder, rather than the usual scale of the organisation and the development process.
    img: Kevlin Henney.png


  - name: Sandi Metz
    twitter: sandimetz
    bio: Author of 99 Bottles of OOP and Practical Object Oriented Design
    title: All The Little Things
    description: |
      # All The Little Things

      In theory, object-oriented applications consist of small, interchangeable objects which know almost nothing about one another. In reality, many apps contain big classes full of long methods built of many conditionals. Our classes act more like procedures than objects; they know too much, they contain code we can't reuse, they're hard to change and they get worse every time we do so. This talk uses the principles of object-oriented design to break ugly procedures into pleasing objects which have just the right balance of knowledge and ignorance. It bridges the gap between theory and practice and reveals a few simple secrets of OOD that you can use to convert confusing, unmaintainable faux-OO code into understandable, reusable, easily testable objects.
    img: Sandi Metz.jpg


  - name: Sam Newman
    twitter: samnewman
    bio: Author of Building Microservices and Monolith to Microservices
    title: "Monolith Decomposition Patterns"
    description: |
      # Monolith Decomposition Patterns

      Big Bang rebuilds of systems are so 20th century. With our users expecting new functionality to be shipped more frequently than ever before, we no longer have the luxury of a complete system rebuild. In fact, a big bang migration of a monolithic architecture into a microservice architecture can be especially problematic, as we’ll explore in this talk.

      We want to ship features, but we also want to improve our architecture, and for many of us this means breaking down existing systems into microservices. But how do you do this while still regularly releasing new features?

      In this talk, I’ll share with you some key principles and a number of patterns which you can use to incrementally decompose an existing system into microservices. I’ll also cover off patterns that can work to migrate functionality out of systems you can’t change, which are useful when working with very old systems or vendor products. We'll look at the use of strangler patterns, change data capture, database decomposition and more.
    img: Sam Newman.png


  - name: Ian Cooper
    twitter: icooper
    bio: Principal Engineer, Global Integration Architect @ Just Eat Takeaway
    title: 'TDD: Where Did It All Go Wrong (Revisited)'
    description: |
      # TDD Revisited: Where Did It All Go Wrong

      Since Kent Beck wrote the book on TDD in 2002 a lot of words have been dedicated to the subject. But many of them propagated misunderstandings of Kent's original rules so that TDD practice bears little resemblance to Kent's original ideas. Key misunderstandings around what do I test, what is a unit test, and what is the 'public interface' have led to test suites that are brittle, hard to read, and do not support easy refactoring. In this talk, we re-discover Kent's original proposition, discover where key misunderstandings occurred and look at a better approach to TDD that supports software development instead of impeding it. Be prepared from some sacred cows to be slaughtered and fewer but better tests to be written.
    img: Ian Cooper.png


  - name: Robert Martin
    twitter: unclebobmartin
    bio: Author of Clean Code, Clean Coder, Clean Architecture, and Clean Agile
    title: 'Clean Agile: Back to Basics'
    description: |
      # Clean Agile: Back to Basics

      Robert C. Martin (Uncle Bob) reintroduces Agile values and principles for a new generation of programmers and nonprogrammers alike, striping away misunderstandings and distractions that over the years made using Agile difficult. 
    img: Robert Martin.png


  - name: Scott Hanselman
    twitter: shanselman
    bio: Principal Architect @ Microsoft, Blogger, Podcaster
    img: Scott Hanselman.png
    title: Scaling Yourself
    description: |
      # Scaling Yourself

      As information workers, we are asked to absorb even more information than ever before. More blogs, more documentation, more patterns, more layers of abstraction. Now Twitter and Facebook compete with Email and Texts for our attention, keeping us up-to-date on our friends dietary details and movie attendance second-by-second. Does all this information take a toll on your psyche or sharpen the saw? Is it a matter of finding the right tools and filters to capture what you need, or do you just need to unplug.


  - name: Anna Boyko
    bio: Staff Engineer @ Coinbase, Core Contributor @ Ethereum
    img: Anna.png


  - name: Venkat Subramaniam
    twitter: venkat_s
    bio: Founder @ Agile Developer, Author of 10+ Programming Books
    title: Towards Evolutionary Architecture
    description: |
      # Towards Evolutionary Architecture

      Big up front design is discouraged in agile development. However, we know that architecture plays a significant part in software systems. Evolving architecture during the development of an application seems to be a risky business. In this presentation, we will discuss the reasons to evolve the architecture, some of the core principles that can help us develop in such a manner, and the ways to minimize the risk and succeed in creating a practical and useful architecture.
    img: Venkat Subramaniam.png


  - name: Eduards Sizovs
    twitter: eduardsi
    bio: Mentor @ The Principal Dev, Founder of DevTernity
    img: Eduards.png
    title: "Clean Code: Techniques You've Never Heard About"
    description: |
      # Clean Code: Techniques You've Never Heard About
      
      In this session, Eduards will go beyond basic clean coding techniques and reveal his favorite (and unusual) techniques for making real-world codebases cleaner and simpler. The examples will be taken from real enterprise projects.


  - name: Gregor Hohpe
    twitter: ghohpe
    bio: Author of The Software Architect Elevator and Enterprise Integration Patterns
    img: Gregor.png
    title: "The Architect Elevator: Connecting Penthouse and Engine Room"
    description: |
      # The Architect Elevator: Connecting Penthouse and Engine Room
      
      Many large enterprises are feeling pressure: digital disruptors attack with brand-new business models and no legacy; the Facebook generation” has dramatically increased user expectations; and access to state-of-the-art technologies has been democratized by cloud providers. This is tough stuff for enterprises that have been, and still are, very successful, but are built around traditional technology and organizational structures. “Turning the tanker”, as the need to transform is often described, has become a board room-level topic in many traditional enterprises. Chief IT Architects and CTOs play a key role in such a digital transformation endeavor. They combine the technical, communication, and organizational skills to create business value from a tech stack refresh, to look behind buzzwords like “agile” and “DevOps”, and to build a technology platform that assures quality while moving faster. They do so by riding the “Architect Elevator” from the penthouse, where the business strategy is set, to the engine room, where the enabling technology is implemented. I rode that elevator for 5 years in a major financial services organization and am now advising major corporations on their digital journey. I collect stories from the daily life of IT transformation and package them in lighthearted, but meaningful anecdotes.


  - name: Adam Tornhill
    twitter: adamtornhill
    bio: Author of Code as a Crime Scene, CTO, Creator of CodeScene
    title: 'Code Red: The Business Impact of Code Quality'
    description: |
      # Code Red: The Business Impact of Code Quality

      Code quality is an abstract concept that fails to get traction at the business level. Consequently, software companies keep trading code quality for new features. The resulting technical debt is estimated to waste up to 42% of developers’ time, causing stress and uncertainty, as well as making our job less enjoyable than it should be. Without clear and quantifiable benefits, it’s hard to build a business case for code quality.

      In this talk, Adam takes on the challenge by tuning the code analysis microscope towards a business outcome. We do that by combining novel code quality metrics with analyses of how the engineering organization works with the code. We then take those metrics a step further by connecting them to values like time-to-market, customer satisfaction, and road-map risks. This makes it possible to a) prioritize the parts of your system that benefit the most from improvements, b) communicate quality trade-offs in terms of actual costs, and c) identify high-risk parts of the application so that we can focus our efforts on the areas that need them the most. All recommendations are supported by data and brand-new research on real-world codebases. This is a perspective on software development that will change how you view code. Promise.
    img: Tornhill.jpg

  - name: Julia Kirsina
    twitter: unicorncoding
    bio: Software Craftswoman, Tech Influencer @ Instagram
    img: Julia.jpg

  - name: Thiago Ghisi
    twitter: thiagoghisi
    bio: Director of Engineering @ Nubank, ex-Apple, ex-ThoughtWorks
    img: Thiago.png
    title: The Road From Dev to Engineering Director
    description: |
      # The Road From Dev to Engineering Director

      Looking at my LinkedIn Profile and seeing my current title as "Director of Engineering," you might feel that my career was an easy straight line from Dev to Director. You are wrong!

      I had many turns back and forth. In the 15 years of my career, I went from being The "Tech Support" guy to Programmer to Project Manager to QA, back to Engineering/DevOps and Agile Consulting, and finally to Engineering Management in the Mobile space, where I finally found myself in the last five years.

      In this talk, I will tell you how all the left and right turns I took on the road prepared me to be where I'm with a much more solid foundation than the 'straight-line career path approach" would ever do.
  - name: Josh Long
    twitter: starbuxman
    bio: Author of Java and Spring Books, Java Champion
    img: Starbuxman.jpg
    title: How We Build Spring Framework
    description: |
      # How We Build Spring Framework
      
      Coming soon.

  - name: J.B. Rainsberger
    twitter: jbrains
    bio: Software Coach, Mentor, Consultant, TDD Trainer
    img: Rainsberger.png
    title: The Economics of Software Design
    description: |
      # The Economics of Software Design
      
      Every month, someone new asks me the question, "How do I convince my manager to let me refactor?" While it's true that a manager shouldn't constrain the programmer's plans to deliver high-quality code, the fact remains that some organisations allow their managers to assert this level of micro-control. In this talk I outline a set of models for justifying evolutionary design with basic economic concepts that relate directly to delivering, planning, and funding software projects. This talk will provide you with a solid argument to meet any skeptic's rational objections to writing tests first and letting both low-level design and architecture emerge.

  - name: Daniel Terhorst-North
    twitter: tastapod
    bio: Originator of BDD, Mentor, Principal Consultant @ Dan North & Associates
    img: Dan North.png
    title: "CUPID: For Joyful Coding"
    description: |
      # CUPID: For Joyful Coding
      
      Some codebases are nicer to work with than others. This is true for applications, services, libraries, frameworks, even programming languages themselves. Is this a purely personal choice or are there universal characteristics of software that can make code a joy to work with?
      Daniel has been thinking about this for a long time, especially since he poked a stick at the SOLID principles for fun a few years ago and people came after him with pitchforks. His post about why he feels SOLID is outdated ended up on the front page of Hacker News!
      Now he has codified his thoughts into his own pithy five-letter acronym, CUPID: Composable, Unix philosophy, Predictable, Idiomatic, Domain-based.
      Why these characteristics, what do they mean, why should you care, and how can they improve your coding experience?

  - name: John Romero
    twitter: romero
    bio: Game Designer, Programmer, Co-founder of id Software
    img: John Romero.png
    title: "The Early Days of id Software: Programming Principles"
    description: |
      # The Early Days of id Software: Programming Principles
      
      As co-founders of id Software, John Romero and John Carmack created the code behind the company's seminal titles. The principles they defined through experience in id’s earliest days built upon one another to produce a unique methodology and a constantly shippable codebase. In this talk, John Romero discusses id software’s early days, these programming principles and the events and games that led to their creation.


  - name: Allen Holub
    twitter: allenholub
    bio: Principal @ Hollub Associates Ltd, Author of Multiple Books
    img: Allen Holub.png
    title: "#NoEstimates – Why, When, and How"
    description: |
      # #NoEstimates – Why, When, and How
      
      This keynote presents my (and many other's) thinking about #NoEstimates. It argues that estimation is a bad thing, particularly in the Agile world, and presents ways to plan that don't involve estimation.



faq:
  - q: Why online?
    a: |
      International online events, if organized with love, beat offline events in accessibility, convenience, productivity, price, and quality. If you care, they are also better for the environment. Furthermore, the quality of discussions and knowledge sharing also wins over offline, where developers socialize in small groups and mostly with their colleagues. Thanks to amazing DevTernity attendees, Slack is always on fire. And if you want to hangout IRL, we'll also connect you with attendees living nearby for discussion, socialization, and drinks. Boom.

      The future of education is online. And DevTernity is leading the way.
  - q: What time zone will the conference take place?
    a: |
      The conference will take place in **Greenwich Mean Time (GMT) timezone.** You can switch between GMT and your local timezone when viewing the schedule.
    
      Because no timezone works equally well for everyone, you are in good company with attendees from 75+ countries, including caffeinated attendees joining at night. If you can't survive the whole day for various reasons (family, timezone, etc.), you can watch the missing parts later.
  - q: Will the sessions be recorded for watching later?
    a: Yes, all main day sessions will be recorded and shared with attendees within 48h. Masterclasses won't be recorded. 
  - q: Will I be able to switch between tracks?
    a: Yes, you will be able to switch between tracks on the fly.
  - q: Are tickets refundable?
    a: No, tickets are not refundable. But you can change the ticket holder (attendee) free of charge.
  - q: Can I change the ticket holder (attendee)?
    a: Yes, you can change the attendee info yourself by typing a new name or email on the e-ticket. You don't have to inform conference organizers on this occasion.    
  - q: Is it OK if I buy one ticket and watch the conference with colleagues who don't hold tickets?
    a: No. You have to purchase a ticket for every viewer (attendee).
  - q: Will I receive a certificate of attendance?
    a: Yes, you will receive a verifiable certificate for both the main day and the masterclass.
  - q: Is there a Code of Conduct I should follow?
    a: 'Yes. In short, be nice and respect people. [Read the full version](coc.html).'
  - q: Who is behind the conference?
    a: |
      DevTernity is fully owned, led, and financed, by its founder [Eduards Sizovs](https://sizovs.net). Being entirely vendor-independent and accepting no sponsorship is a prerequisite for maintaining unbiased views and exceptional quality of all sessions.
      
      Bills/invoices are issued by:
      ```
      DevTernity OÜ
      Registration number: 14226860
      VAT number: EE101974721
      Moisavahe 38-129 Tartu, Estonia, 50708
      Bank: AS LHV Pank
      IBAN: EE757700771002512472
      SWIFT: LHVBEE22
      ```
  - q: How can I follow the news and updates?
    a: |
      <div class="flex gap-4 items-center">
        <a href="https://twitter.com/devternity" target="noopener noreferrer nofollow"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-twitter"><title>Go to conference's Twitter</title><path d="M23 3a10.9 10.9 0 0 1-3.14 1.53 4.48 4.48 0 0 0-7.86 3v1A10.66 10.66 0 0 1 3 4s-4 9 5 13a11.64 11.64 0 0 1-7 2c9 5 20 0 20-11.5a4.5 4.5 0 0 0-.08-.83A7.72 7.72 0 0 0 23 3z"></path></svg></a>
        <a href="https://instagram.com/devternity" target="noopener noreferrer nofollow"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-instagram"><title>Go to conference's Instagram</title><rect x="2" y="2" width="20" height="20" rx="5" ry="5"></rect><path d="M16 11.37A4 4 0 1 1 12.63 8 4 4 0 0 1 16 11.37z"></path><line x1="17.5" y1="6.5" x2="17.51" y2="6.5"></line></svg></a>
        <a href="https://facebook.com/devternity" target="noopener noreferrer nofollow"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-facebook"><title>Go to conference's Facebook page</title><path d="M18 2h-3a5 5 0 0 0-5 5v3H7v4h3v8h4v-8h3l1-4h-4V7a1 1 0 0 1 1-1h3z"></path></svg></a>
        <a href="https://linkedin.com/groups/8371335" target="noopener noreferrer nofollow"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-linkedin"><title>Go to conference's LinkedIn group</title><path d="M16 8a6 6 0 0 1 6 6v7h-4v-7a2 2 0 0 0-2-2 2 2 0 0 0-2 2v7h-4v-7a6 6 0 0 1 6-6z"></path><rect x="2" y="9" width="4" height="12"></rect><circle cx="4" cy="4" r="2"></circle></svg></a>
      </div>
  - q: How can I contact organizers?
    a: |
      <code><a class="flex gap-4 items-center" href="mailto:hello@devternity.com"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-send"><line x1="22" y1="2" x2="11" y2="13"></line><polygon points="22 2 15 22 11 13 2 9 22 2"></polygon></svg> hello@devternity.com</a></code>

  