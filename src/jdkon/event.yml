---
product: JDKON_23
name: JDKon
nameHint: "#1 Java Developer Conference"
description: The place where professional Java developers grow
slogan: The place where professional Java developers grow
about: |
  JDKon is the **#1 international conference for professional Java developers.**

  Through practical demos, discussions, and masterclasses guided by the world’s leading Java experts, you’ll learn how to build **clean, efficient, and maintainable Java applications.**

  Join us to stay up-to-date with modern Java architectures, frameworks, and coding practices. **And become a better Java developer.**

  <div class="text-4xl">IT'S A MUST-SEE.</div>
website: https://jdkon.io
cfAnalytics: 22c93ae4312a4cb686bdfae0032f3df5
email: hello@jdkon.io
year: 2024
date: "2024-05-23"
prices:
  EUR: 399
  GBP: 360
  USD: 435
priceHint:
partners:
  - title: Google
    link: https://www.google.com
  - title: Logitech
    link: https://www.logitech.com
  - title: DigitalOcean
    link: https://www.digitalocean.com
  - title: Slack
    link: https://www.slack.com
  - title: Microsoft
    link: https://www.microsoft.com
  - title: Atlassian
    link: https://www.atlassian.com
  - title: Pulumi
    link: https://pulumi.com
  - title: Turkish
    link: https://turkishtechnology.com
  - title: Coursera
    link: https://coursera.com
  - title: Gitlab
    link: https://gitlab.com
  - title: DevITUK
    link: https://devitjobs.uk/jobs/all/remote
  - title: DevEvents
    follow: true
    link: https://dev.events/tech
  - title: AWS
    link: https://aws.amazon.com
  - title: JetBrains
    link: https://www.jetbrains.com

masterclasses:
  date: "2024-05-24"
  items:
    - instructor:
        name: Vlad Mihalcea
        img: Vlad.jpg
      title: High-Performance Java Persistence
      from: "08:00"
      to: "17:00"
      brief_description: |
        # High-Performance Java Persistence

        Adding JPA and Hibernate annotations is fairly easy. But:
        - Do you know how a relational database systems works behind the scenes?
        - Do you know the performance implications of each JPA/Hibernate feature your application makes heavy use of?
        - Do you know how the JDBC Driver executes statements and how you can configure it to boost application performance?

        This masterclasses is aimed to level up your data access, JDBC, and Hibernate skills.

        We'll cover essential topics, including:
        - Transactions, locking, and concurrency control
        - Database, application and Hibernate caching
        - Connection management and pooling
        - Persistence context
        - Fetching strategies, batching, statement caching
        - Query optimization

        And much more!

        At the end of the masterclasses, you'll have a much deeper understanding of database access, JDBC, and Hibernate, and will be able to troubleshoot and optimize data access performance in your own projects.

    - instructor:
        name: Peter Gafert
        img: PeterGafert.jpg
      title: ArchUnit In Practice
      from: "09:00"
      to: "17:00"
      brief_description: |
        # ArchUnit In Practice

        In this workshop, I'm going to take you on a journey through the features of ArchUnit. We will first check out the basics of the core and rules API and then look at various real-world examples you could come across in your daily work. This journey will take us through code examples for which we will write architecture rules of various scope and difficulty. On the way, we will also cover typical pitfalls you might encounter while applying ArchUnit to real-world projects.

        You'll learn how to:
        * Define and enforce strict architectural rules between classes, packages, layers, and slices, ensuring your system's integrity remains intact.
        * Leverage ArchUnit high-level constructs for enforcing layered, onion, or sliced architectures.
        *  Use ArchUnit to gradually improve legacy codebases with thousands of violations and prevent the code base from further deterioration.
        * Get rid of circular dependencies between classes and packages.
        * Derive architecture rules from PlantUML diagrams.
        * Understand, calculate, and enforce critical architecture/quality/complexity metrics.
        * Extend ArchUnit with custom functionality/assertions/rules.
        * and much more!

        You will leave this workshop with an in-depth knowledge about ArchUnit's capabilities and applying it to a wide variety of real-world scenarios that will help to keep your projects consistent and maintainable over the whole application life span.

    - instructor:
        name: Oliver Drotbohm
        img: Oliver.jpg
      title: Building Modular Applications with Spring
      from: "09:00"
      to: "17:00"
      brief_description: |
        # Building Modular Applications with Spring

        Spring Modulith is a very recent addition to the Spring Framework project ecosystem. It allows application developers to express logical application modules in their Spring Boot-based code bases.

        The workshop introduces the fundamental concepts of Spring Modulith, how to design application modules, how to structure a project for encapsulation and test modules both isolated and in collaboration. Further, we discuss various application module interaction strategies and their specific tradeoffs to eventually conclude exploring the architectural observability of the application, both in form of documentation and runtime information.

        #### Slot 1 – Fundamentals
        - Application Modules and their design
        - Architecturally evident code
        - Modules and Hexagonal-, Onion and Clean architecture
        - Module structure verification
        - Designing for modularity


        #### Slot 2 – Application Module Interaction
        - Modes of interaction
        - Consistency
        - Asynchronous VS. synchronous interaction
        - Event-based interaction
        - Event Publication Registry


        #### Slot 3 – Integration testing
        - Fundamental, module-based integration testing
        - The PublishedEvents API
        - The Scenario API


        #### Slot 4 – Observability & Documentation
        - Extracting developer documentation from code
        - Customizing documentation
        - Observing application modules
        - IDE & deployment platform integration

    - instructor:
        name: Jakub Pilimon
        img: Pilo.png
      title: Tactical Domain-Driven Design for Modern Applications
      from: "09:00"
      to: "17:00"
      brief_description: |
        # Tactical Domain-Driven Design for Modern Applications

        In an era of microservices and evolving application complexities, Tactical Domain-Driven Design (DDD) offers developers a way to build resilient, adaptable, and business-centric software. However, the success of DDD doesn’t just lie in the understanding of its principles but in the mastery of its tactical tools and patterns.

        This course will delve deep into the tactical side of DDD, focusing on those design patterns and practices that directly impact code-level implementations. Java developers will discover how to bridge the gap between domain experts and software, ensuring that the software genuinely fulfills the business's needs and evolves with it.

        By the end of this hands-on course, you'll understand:
        - The role of Entities, Value Objects, and Aggregates in your domain
        - How to apply Repositories and Factories for effective persistence mechanisms
        - Designing domain events to signify important state transitions
        - Utilizing services for domain logic that doesn’t naturally fit within Entities or Value Objects
        - The significance and usage of Anti-Corruption Layers to protect your domain

        And you'll be able to:
        - Design a rich and versatile domain model that truly represents business requirements
        - Implement robust validation mechanisms and business rules using tactical DDD patterns
        - Seamlessly integrate your domain model with your application’s infrastructure
        - Improve the maintainability and adaptability of your software through Tactical DDD techniques

        And much more!

    - instructor:
        name: Bartlomiej Slota
        img: Bart.jpg
      title: "Effective Coding Practices for Java Developers"
      from: "09:00"
      to: "17:00"
      brief_description: |
        # Effective Coding Practices for Java Developers

        Many of us are familiar with the challenges posed by legacy applications. Some have the luxury of starting with a clean slate, but over time, even greenfield projects can morph into something reminiscent of the legacy apps we once struggled with. These shared issues often lead both legacy and greenfield applications to a state where implementing even a minor change becomes a painful endeavor.

        How can we circumvent these challenges? What path should we tread? What are our goals? What defines an exemplary application? Let's collaboratively construct such an application during this masterclass!

        Join us for this masterclass where you will delve into practices that every professional developer should not only comprehend but also implement while building a Java-based business application. Throughout the course, you will:

          * Engage extensively in Test-Driven Development (TDD)
          * Craft tests using contemporary tools like Groovy and Spock
          * Master patterns and practices for writing tests that don't break when you refactor code internals
          * Construct robust business objects and rich domain models and understand the rationale behind it
          * Write business code that is configurable and detached from external systems such as DB or HTTP services
          * Develop a clear understanding of how to properly organize your code in packages and layers
          * ...and much more!

        This masterclass is dedicated to developers able to code and complete exercises in Java.

        Embark on this journey to refine your coding practices and emerge as a more adept professional developer!

    - instructor:
        name: Victor Rentea
        img: Victor Rentea.jpg
      title: Clean and Pragmatic Architecture
      from: "08:00"
      to: "16:00"
      brief_description: |
        # Clean and Pragmatic Architecture

        In this masterclass, through code examples, hands-on exercises,
        and discussions you''ll learn how to design a clean and pragmatic architecture.

        The topics include:
        * Layered Architecture: strict and relaxed variants
        * Onion Architecture (aka Clean, Hexagonal, Ports-and-Adapters, Universal)
        * Controllers: typical design options with tradeoffs
        * Entities: techniques and best practices for modeling expressive entities
        * Domain Services: how to keep them small, what is the domain logic?
        * Facade vs. Application Service (DDD): a pragmatic evolutionary design strategy
        * DTOs: enemy structures and when to keep them out of our domain
        * Entity/DTO mapping: Best practices, pitfalls of automatic mappers
        * Dependency Inversion Principle: stopping external APIs from polluting our domain
        * Repositories: designing a domain-friendly search DSL
        * Domain Events: mainstream best practices
        * CQRS: separating read/write models
        * and much more!

    - instructor:
        name: Chris Chedgey
        img: Chris Chedgey.jpg
      title: Regaining Control of Internal Dependencies with Structure101
      from: "09:00"
      to: "17:00"
      brief_description: |
        # Regaining Control of Internal Dependencies with Structure101

        During this hands-on workshop you will become a Stucture101 power-user, able to perform dramatic structural improvements that simply can’t be done in your IDE alone.

        Have you noticed that project codebases become harder to understand as they grow? Not only that, but every feature takes longer to implement and causes endless side-effects? Perhaps one of the modules has grown huge and keeps getting bigger, but seems impossible to decompose? It’s like everything uses everything - the architecture has been swallowed up by a big ball of mud!

        By the end of this workshop, you will understand the root cause of these problems – the uncontrolled explosion of internal dependencies. You will be fully equipped to reduce and control dependencies, making your codebases substantially easier to extend and manipulate. You will be ready to decompose monoliths, define dependency constraints, and define the exact code steps required to make major architectural changes when they are needed.

        You will work with the interactive Structure101 model to:
        - Browse and understand your codebase structure
        - Identify the most severe regions of structural over-complexity
        - Find the quickest way to decouple packages
        - Break up a monolithic module
        - Extract specific features from one module into a new module
        - Define layering constraints between modules and packages
        - Define visibility (API) constraints between modules and packages
        - Detect, track and repair dependency rule violations
        - Perform task-specific queries against the Structure101 dependency database
        - And lots more!

        As an attendee, you will receive a free 1-year floating subscription for Structure101 Studio for Java. You will download the sample projects so you can follow along and perform manipulations during the workshop.
schedule:
  - from: "09:00"
    to: "09:50"
    talks:
      - Dave Farley
      - Chris Chedgey
      - Vlad Mihalcea
  - from: "10:10"
    to: "11:00"
    talks:
      - Peter Gafert
      - Thomas Vitale
      - Victor Rentea
  - from: "11:20"
    to: "12:10"
    talks:
      - Dmitry Buzdin
      - Jakub Pilimon
      - Lukas Eder
  - from: "13:10"
    to: "14:00"
    talks:
      - Valentina Cupać
      - Josh Long
      - Oliver Drotbohm
  - from: "14:20"
    to: "15:10"
    talks:
      - J.B. Rainsberger
      - Bartlomiej Slota
      - Eduards Sizovs
  - from: "15:30"
    to: "16:20"
    talks:
      - Jakub Nabrdalik
      - Simon Martinelli
      -
  - from: "16:40"
    to: "17:30"
    talks:
      -
      -
      -

keynotes:
  - name: Dave Farley
    bio: Author of Modern Software Engineering and Continuous Delivery
    title: Taking Back "Software Engineering" – Craftsmanship is Insufficient
    description: |
      # Taking Back "Software Engineering" – Craftsmanship is Insufficient

      Craftsmanship is not enough. Would you fly in a plane designed by a craftsman or would you prefer your aircraft to be designed by engineers?

      Engineering is the application of iterative, empirical, practical science to real-world problems. Craftsmanship is a wonderful thing, and as a reaction to the terrible abuses of the term engineering in software development software craftsmanship has helped in our learning of what really works.

      It is time to define what our "engineering" discipline should entail.
    img: Dave Farley.jpg

  - name: Josh Long
    bio: Author of Java and Spring Books, Java Champion
    title: Bootiful Spring Boot 3.x
    description: |
      # Bootiful Spring Boot 3.x

      Spring Framework 6+ and Spring Boot 3+ are here, which means new baselines and possibilities. Spring Framework implies a Java 17 and Jakarta EE baseline and offers new support for building GraalVM-native images and a compile-time component model in the new Spring AOT engine. It also features a new observability layer, declarative HTTP and RSocket clients, preliminary Project Loom and CRaC support, ProblemDetail support, and much more. Developer productivity is second to none with first class support for Testcontainers, Docker Compose, and live reloads. Spring makes idiomatic use of the latest Kotlin features like coroutines and extension functions. Join me Spring Developer Advocate Josh Long and we’ll explore next-gen Spring together
    img: Starbuxman.jpg

  - name: Victor Rentea
    bio: Java Champion, Trainer, Lead @ European Software Crafters
    title: How Hibernate Actually Works
    description: |
      # How Hibernate Actually Works

      TBA
    img: Victor Rentea.jpg

  - name: Lukas Eder
    bio: Java Champion, creator of jOOQ, the best way to write SQL in Java
    title: Become a SQL Power User with the Latest jOOQ
    description: |
      # Become a SQL Power User with the Latest jOOQ

      In this live coding session, Lukas, the author of jOOQ, will show you the latest features of jOOQ, which make working with type safe, embedded SQL fun and productive. This includes the powerful MULTISET operator to nest arbitrary collections, type safe converters to your DTO types, powerful dynamic SQL, computed columns, SQL transformation and translation capabilities, stored function and UDT support, diagnostics, and much more.
    img: Lukas.png

  - name: Jakub Nabrdalik
    bio: Software Architect, Mentor, Trainer @ Bottega IT Minds
    title: "Microservices and Modules: Modeling for Processes, not Databases"
    description: |
      # Microservices and Modules: Modeling for Processes, not Databases

      One of the most dangerous errors people make designing modules and microservices is thinking in terms of data and databases, instead of processes. In microservices this breaks the data locality paradigm and creates a distributed monolith. In modules this creates anemic domain and makes the whole architecture tightly coupled and frankly... pointless.

      In this talk let me show you some examples of those errors, and how to free yourself from 3rd-normal-form database way of thinking, and start using high level languages for what they really were design for: complex processes.

      If data centric approach were good for complex business software, we would be building apps using only SQL.
    img: Jakub Nabrdalik.png

  - name: Oliver Drotbohm
    bio: Staff Engineer @ VMWare, Java Champion, Creator of Spring Modulith
    title: Spring Modulith — Spring for the Architecturally Curious Developer
    description: |
      # Spring Modulith — Spring for the Architecturally Curious Developer

      The architecture and design of an application significantly influences its maintainability, testability and quality in general. Spring has always been a versatile tool that supports architects implementing the practices and patterns that have emerged to align technical building blocks in their code bases with domain concepts and boundaries. It lets developers build applications that clearly reflect architectural ideas and that are ultimately more amendable and maintainable. This talk discusses those patterns and approaches to introduce Spring Moduliths to, in turn, show how they uniquely position Spring developers to build better structured, more maintainable applications.
    img: Oliver.jpg

  - name: Vlad Mihalcea
    bio: Java Champion, author of High-Performance Java Persistence, CEO @ Hypersistence
    title: High-Performance Java Persistence
    description: |
      # High-Performance Java Persistence

      JPA is a very popular Java data access technology, and knowing its inner workings can make the difference between a high-performance enterprise application and one that barely crawls.

      In this presentation, we go through the most common performance bottleneck issues while providing the most effective solutions as well.

      Every Java developer who writes data access code using Spring, Jpa, and Hibernate will benefit from these high-performance tips.
    img: Vlad.jpg

  - name: Valentina Cupać
    bio: Technical Coach, Founder @ TechExcellence.io
    title: TDD in Hexagonal and Clean Architecture
    description: |
      # TDD in Hexagonal and Clean Architecture

      TDD and Hexagonal Architecture help us build high-quality software products and reduce long-term maintenance costs. With TDD, our tests act as executable specifications of behavior that drive the implementation. With Clean Architecture, we can model our application core in such a way that it is independent of infrastructural concerns.

      In this session we will review Hexagonal Architecture, aka Ports & Adapters, through a multi-module Java project.
    img: Valentina.jpg

  - name: Jakub Pilimon
    bio: Staff Technologist @ VMWare, Trainer @ Bottega IT Minds
    title: Refactoring to Event-Sourcing – No Slides, Just Code
    description: |
      # Refactoring to Event-Sourcing – No Slides, Just Code

      Tired of fancy abstractions without actual down to earth implementation? In this talk, we will go through some benefits of having an event-sourced model on a real example. This is full-time live coding and we will start with a simple Spring Boot based OOP application and turn it upside down with events. Basic knowledge of DDD and/or OOP is welcome!
    img: Pilo.png

  - name: Alina Prokhoda
    bio: Senior Engineer @ WhatsApp, Microsoft MVP, Blogger @ Hashnode
    # title: Refactoring to Event-Sourcing – No Slides, Just Code
    # description: |
    # TBA
    img: Alina_K.png

  - name: Thomas Vitale
    bio: Software Architect, author of Cloud Native Spring in Action
    title: Cloud-Native Spring in Action
    description: |
      # Cloud-Native Spring in Action

      The Spring ecosystem provides you with all you need to build cloud native applications, focusing on productivity, simplicity and speed. It’s ready to leverage cloud environment features and integrates with Kubernetes natively.

      In this session, Thomas will cover common patterns and best practices to build cloud native applications using Reactive Spring, which provides better performance, resilience, and efficiency. You’ll then see how to containerize them, configure them through the natively supported ConfigMaps and Secrets, and deploy them to a Kubernetes cluster. Finally, he’ll show how to use Spring Native to build GraalVM native executables.

    img: ThomasVitale.png

  - name: Dmitry Buzdin
    bio: Director of Software Engineering @ Teya, Riga Dev Days Organizer
    title: Forget about Microservices, Micromodules is a new Silver Bullet
    description: |
      # Forget about Microservices, Micromodules is a new Silver Bullet

      Do you think that you should use microservices in your next project, but are afraid of complexity and infrastructure issues? Do you want to find a middle ground between flexibility of system architecture and speed of development? If yes, then this talk is for you! We will go through micromodule architecture, which is pioneered by Dmitry and his team.

      We will go through how to combine benefits of both micro services and monolith worlds in one shot.
    img: Buzdin.png

  - name: Chris Chedgey
    bio: Architect, Speaker, Co-Founder & CEO at Structure101
    title: Beautiful Software Structure – One Line at a Time
    description: |
      # Beautiful Software Structure – One Line at a Time

      You know beautiful code when you see it. But what about lots and lots of beautiful code; is it still beautiful at a distance? “Structure” is how all the snippets of code are recursively organized into containers (methods, classes, packages, jars, projects, etc.) and how the resulting containers relate to each other due to the dependencies that emerge from the code. The same code can be organized one way into a hopelessly tangled mess, or another way … into a Beautiful Structure. This talk explores how “locality of relationship” affects coupling, cohesion, and the width of interfaces. It illustrates how some structural patterns dramatically increase complexity, and how alternative patterns can massively decouple and simplify, and show how it can be relatively straightforward to transform one into the other. Concrete on-the-fly restructuring will be performed on open-source codebases, and it will be shown how to spot problems as source lines are edited and before they emerge as major structural problems.
    img: Chris Chedgey.jpg

  - name: Julia Kirsina
    twitter: unicorncoding
    bio: Software Craftswoman, Tech Influencer @ Instagram
    img: Julia.jpg

  - name: J.B. Rainsberger
    bio: Software Coach, Mentor, Consultant, TDD Trainer
    img: Rainsberger.png
    title: The Well-Balanced Programmer
    description: |
      # The Well-Balanced Programmer

      A well-balanced programmer feels comfortable dealing with designing software, managing projects, and working with people. Companies seem to want to hire "the best", but well-balanced programmers relatively rare. Although many programmers feel confident arguing about algorithms, modularity, and scalability in design sessions, they would stand out from their peers if they also had incredible habits for managing their work, knew how to negotiate features with product owners, had intelligent conversations with project managers about the risks in their project, and understood what lies behind the irrationality of the people and systems around them. Sadly, most programmers don't appreciate the value of these skills. Others don't know how to get started learning them. I started programming computers because people are messy! I'd like to share a curated collection of concepts for you explore that will help you become irresistibly valuable to your employer or clients. I plan to share the design principles and programming techniques that amplified my skills the most over the last 20 years. In addition, I'll describe how I learned the key non-programming concepts, techniques, and approaches that have endeared me to fellow programmers, managers, and clients. I offer you a very practical approach to issues like influencing peers, negotiating with stakeholders, and adopting new ways of working safely. I'll help you start to build a personal work system that will free your mind to do your best work. I know how this might sound. I promise to share concrete techniques that you can begin applying right away. Of course, these techniques aren't magic, so you'll have to read some more and practise on your own, but you will know how to get started right away on becoming the well-balanced programmer that every manager and co-worker will love to have on their team.

  - name: Peter Gafert
    bio: Creator of ArchUnit, Principal Software Architect @ tado°
    title: Unit-Testing Your Architecture with ArchUnit
    description: |
      # Unit-Testing Your Architecture with ArchUnit

      Every complex software product has a variety of architectural concepts that directly affect the code base. Which types of components do we have, how do we identify these components, how do we structure them and how are they allowed to depend on each other and through which interfaces. However, in an agile environment with many developers and distributed roles, it becomes harder and harder to keep a common understanding and a consistent code structure.

      If the architecture deteriorates, costs for development will rise. Also fixing the code structures will become more and more expensive, the longer it takes to find and fix architecture violations. Thus every project should establish an automated test process to continuously check for violations and allow developers to fix them, while the costs are still low.

      This session will show through lots of live coding, how the open source library ArchUnit can help to maintain these structures.
    img: PeterGafert.jpg

  - name: Bartlomiej Slota
    bio: Software Engineer, Speaker, Trainer @ Bottega IT Minds
    title: Make Your Architecture Scream with Functional Domain Modeling
    description: |
      # Make Your Architecture Scream with Functional Domain Modeling

      Have you ever heard that Domain Driven Design is like Object-Oriented programming taken to the next level? But is it always the case? It's time to explore a fresh perspective and envision business processes as workflows, and pipelines. By embracing functional programming concepts, we'll elevate our Java applications to new heights. Join us in this session as we apply functional programming principles to our Java codebase and delve into their profound impact on security, testability, readability, and more.
    img: Bart.jpg

  - name: Eduards Sizovs
    bio: Mentor @ Principal Dev, Founder of JDKon and DevTernity
    title: "Clean Domain: Patterns, Principles, Practices"
    description: |
      # Clean Domain: Patterns, Principles, Practices

      In my 15+ years of consulting experience, I reviewed hundreds of Java applications, and only a few had a well-crafted and clean domain model. Unfortunately, most suffered from various *repeating* design smells – from poor naming to excessive coupling to fundamentally flawed OO design.

      In this session, packed with practical code examples, I'll teach you principles, practices, and patterns for making your software domain models richer, cleaner, and more expressive. Because life is too short to work on domain models that suck.
    img: Eduards.png

  - name: Simon Martinelli
    bio: Software Architect, Java Expert Group Member, Vaadin Community Award Winner
    title: "Do You Really Need JavaScript?"
    description: |
      # Do You Really Need JavaScript?

      The gap between frontend and backend in web development has widened in recent years. In frontend programming, frameworks such as Angular, React, or Vue.js are predominant, forcing developers to use a different programming language and a different ecosystem.

      This has made it more difficult for Java developers to find their way around, and in many projects, frontend and backend developers are separated.

      However, it can be beneficial in many ways if a developer can develop both the frontend and backend. But as a Java developer, do I have to get familiar with a whole new ecosystem?
      No, there is an exciting alternative!

      This talk shows how to develop dynamic web applications quickly as a Java full-stack developer using Thymeleaf and htmx. htmx gives you access to AJAX, CSS Transitions, WebSockets and Server-Sent Events directly in HTML, using attributes so that you can build modern user interfaces with the simplicity and power of hypertext
    img: Simon Martinelli.png

faq:
  - q: What time zone will the conference take place in?
    a: |
      The conference will take place in **Greenwich Mean Time (GMT) timezone.**

      Because no timezone works equally well for everyone, you are in good company with attendees from 75+ countries, including caffeinated attendees joining at night. If you can't survive the whole day for various reasons (family, timezone, etc.), you can watch the missing parts later.
  - q: Will the sessions be recorded for watching later?
    a: Yes, all main day sessions will be recorded and shared with attendees within 48h. Masterclasses won't be recorded.
  - q: Can I switch between tracks?
    a: Yes, you will be able to switch between tracks on the fly.
  - q: Can I change the ticket holder (attendee)?
    a: Yes, you can change the attendee info by typing a new name/email on the e-ticket. You don't have to inform conference organizers on this occasion.
  - q: Can I buy one ticket and watch the conference with colleagues who don't hold tickets?
    a: No. You have to purchase a ticket for every viewer (attendee). Be a good citizen.
  - q: Will I receive a certificate of attendance?
    a: Yes, you will receive a verifiable certificate for both the main day and the masterclass.
  - q: Is there a Code of Conduct I should follow?
    a: "Yes. In short, be nice and respect people. [Read the full version](coc.html)."
  - q: Who is behind the conference?
    a: JDKon is led by a small group of passionate software engineers from Singapore, Latvia, Estonia, and the Netherlands. We're 100% self-funded and vendor-independent. Accepting no sponsorship is a prerequisite for maintaining unbiased views and exceptional quality of all sessions.
  - q: How do I pay for the conference?
    a: After registration, you'll receive a tax invoice that you can pay by Visa/Mastercardor via bank transfer.
  - q: How do I convince my manager to send me to JDKon?
    a: To make it easy to ask for company funding, [download this template](https://docs.google.com/document/d/11OoJU75B1GRaxaao8Y2Vil98jPZD4SVT2xoWn30Z8zU/edit).
  - q: How can I become a speaker?
    a: Send us proposals to <code><a href="mailto:cfp@jdkon.io">cfp@jdkon.io</a></code>. We will respond within ten working days if 1) we have speaking slots left and 2) we like what we see. If we do not respond within ten working days, consider your session not accepted.
  - q: How can I contact organizers?
    a: |
      <code><a class="flex gap-4 items-center" href="mailto:hello@jdkon.io"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-send"><line x1="22" y1="2" x2="11" y2="13"></line><polygon points="22 2 15 22 11 13 2 9 22 2"></polygon></svg> hello@jdkon.io</a></code>
